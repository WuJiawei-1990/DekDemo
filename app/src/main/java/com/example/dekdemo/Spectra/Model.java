package com.example.dekdemo.Spectra;

/**
 * Created by ChenGang on 2018/12/6.
 */

public class Model {
    public static double PreTSS = 0;
    public static String TssToShow = null;
    public static final int PixelStart = 69;
    public static final int PixelEnd = 169;
    public static final int SelectPixelNum = PixelEnd - PixelStart + 1;
    public static final double MeanTSS = 13.2934375;
    public static double SpectraStd;
    public static double SpectraAverage;
    public static double[] SpectraRaw = new double[SelectPixelNum];
    public static double[] SpectraAbsorb = new double[SelectPixelNum];
    public static double[] SpectraSNV = new double[SelectPixelNum];
    public static double[] ConvMatrix = new double[SelectPixelNum];
    public static final double[] RegCoefficient =
            {
                    45.560425, 31.388836, 14.955290, 6.619247, 2.988812, -11.687199, -13.089381, -16.296162, -19.376579, -16.839093, -15.529319, -5.363316, -12.982598,
                    -15.439605, -2.546172, -9.094101, -1.474172, -4.752336, -8.712641, 3.469213, -10.195599, -1.135225, 0.698085, 0.676387, -0.384789, 2.733638, -1.459781,
                    4.418543, -2.083768, -3.381938, -1.361116, -2.402508, 4.521729, 0.142483, 2.254987, -2.392824, -5.569728, 9.694230, 9.752848, 2.592605, 10.133224, 10.344994,
                    1.538925, 5.376871, 8.063200, 8.940504, 1.362733, -5.549642, -6.217407, 1.538494, -7.164202, -0.093301, 3.873590, -5.762282, -0.823354, 2.313990, 0.595129,
                    1.854237, -1.010599, 10.899580, 18.478814, 18.030813, 8.014185, 15.947510, 9.202148, 4.484948, 7.833255, 11.821818, 12.768460, 8.627953, 3.653553, 3.942040,
                    -0.084827, -0.299871, -14.970860, -12.205780, -10.670616, -10.604775, -18.890585, -11.478576, -19.740230, -13.956071, -16.288499, -13.622649, -6.143104,
                    -8.478823, -9.253564, 2.059376, -8.506748, -7.208538, -2.756776, 0.448338, 1.969588, 3.530750, 5.787356, 9.415385, 10.030754, 13.173404, 9.117775, 5.039083, 2.651493
            };
    public static final double[] MeanWaveLength =
            {
                    1.110833682, 1.095288298, 1.082632143, 1.063593771, 1.044589827, 1.026364396, 1.006815203, 0.987627607, 0.974490451, 0.962223388, 0.953151506, 0.948447911,
                    0.947432728, 0.952703907, 0.957277389, 0.968632981, 0.982604674, 0.998110054, 1.015422772, 1.03385938, 1.051998786, 1.069587439, 1.083975822, 1.09706706,
                    1.108864796, 1.11143137, 1.115526513, 1.110328351, 1.102585502, 1.090902016, 1.071243483, 1.049551124, 1.021711567, 0.989267152, 0.953011972, 0.91248465,
                    0.86347885, 0.814575625, 0.75617699, 0.695926945, 0.633246467, 0.571395539, 0.512238589, 0.456290632, 0.402398077, 0.356694517, 0.314361163, 0.274318099,
                    0.239527182, 0.202347085, 0.169708926, 0.135482418, 0.099124222, 0.063901755, 0.026682512, -0.010324788, -0.048913615, -0.090237363, -0.131181516, -0.17430555,
                    -0.219089475, -0.264783212, -0.310990015, -0.358373683, -0.407037422, -0.455444725, -0.504068077, -0.551825202, -0.599935702, -0.645337094, -0.69185484, -0.735379389,
                    -0.778475203, -0.820868491, -0.860316729, -0.898891819, -0.936424453, -0.972653597, -1.008414314, -1.043229715, -1.07734975, -1.112317019, -1.147552645, -1.183006156,
                    -1.219448859, -1.257044275, -1.296314094, -1.336754004, -1.378761727, -1.422592643, -1.468742183, -1.51486206, -1.561792213, -1.608800141, -1.656030267, -1.702205193,
                    -1.747846233, -1.792997555, -1.83670336, -1.879391039, -1.920647858
            };
    public static final int[] Reference =
            {
                    6295, 8119, 10610, 13344, 16619, 20022, 23522, 27012, 30488, 33480, 36300, 38956, 41219, 43187, 44999, 46662, 48121, 49774, 51407, 53041, 55005, 57144, 59441, 61755, 64245, 66438, 68561,
                    70949, 72732, 74508, 76239, 77684, 79016, 80384, 81935, 83384, 85041, 86676, 88191, 90116, 91701, 93421, 95076, 96445, 98074, 99350, 100660, 101992, 103068, 104351, 105862, 107331, 108667,
                    110450, 112312, 114556, 117095, 119593, 122251, 124839, 127638, 130398, 132819, 135503, 137606, 139620, 141340, 142622, 143643, 144407, 144679, 145126, 145134, 144865, 144652, 144521,
                    144226, 144093, 143937, 143875, 143805, 144062, 144347, 144599, 145034, 145773, 146235, 146769, 147381, 148011, 148519, 148878, 149278, 149506, 149532, 149489, 149374, 149193, 148893, 148199,
                    147700, 147007, 146443, 145737, 145111, 144204, 143631, 142771, 142151, 141602, 140986, 140391, 139797, 139205, 138837, 138274, 137661, 137145, 136278, 135721, 135086, 134277, 133271, 132420,
                    131324, 130449, 129025, 127736, 126472, 125063, 123532, 122051, 120489, 118867, 117299, 115824, 114263, 112689, 111116, 109335, 108193, 106635, 105375, 104002, 102558, 101260, 100152, 98906,
                    97693, 96454, 95284, 94288, 93206, 92041, 91156, 90011, 88927, 87962, 87002, 85900, 84811, 83623, 82487, 81427, 80131, 79082, 77703, 76442, 75148, 73758, 72369, 71067, 69638, 68457, 66882, 65350,
                    63892, 62453, 60961, 59418, 57865, 56257, 54788, 53219, 51805, 50581, 49040, 47613, 46464, 44934, 43753, 42396, 41115, 40057, 38754, 37467, 36346, 35337, 34344, 33263, 32278, 31321, 30163, 29276,
                    28443, 27406, 26821, 25823, 24928, 24209, 23409, 22515, 21847, 21191, 20455, 19812, 19160, 18539, 17891, 17152, 16448, 16058, 15401, 14803, 14215, 13702, 13280, 12843, 12275, 11931, 11331, 10902,
                    10499, 10135, 9734, 9136, 8973, 8521, 8201, 7928, 7684, 7261, 6972, 6876, 6686, 6347, 6087, 5931, 5589, 5578, 5280, 5072, 4876, 4744, 4504, 4370
            };

    public static double CalculateAverage(double[] values) {
        double sum = 0, result = 0;
        if (values.length > 0) {
            for (double e : values) {
                sum += e;
            }
            result = sum / (double) values.length;
        }
        return result;
    }

    public static double CalculateStd(double[] values) {
        double result = 0, sum = 0;
        if (values.length > 0) {
            //  计算平均数
            double avg = CalculateAverage(values);
            //  计算各数值与平均数的差值的平方，然后求和
            for (int i = 0; i < values.length; i++) {
                sum += Math.pow(values[i] - avg, 2);
            }
            //  除以n-1，然后开方
            result = Math.sqrt(sum / (values.length - 1));
        }
        return result;
    }

    private double PredictTss(int[] Data) {
        PreTSS = 0;
        for (int i = 0; i < SelectPixelNum; i++) {
            SpectraRaw[i] = (double) (Data[PixelStart + i]);
            SpectraAbsorb[i] = Math.log10((double) Reference[PixelStart + i] / (SpectraRaw[i]));
        }
        SpectraAverage = CalculateAverage(SpectraAbsorb);
        SpectraStd = CalculateStd(SpectraAbsorb);
        for (int i = 0; i < SelectPixelNum; i++) {
            SpectraSNV[i] = (SpectraAbsorb[i] - SpectraAverage) / SpectraStd;
            ConvMatrix[i] = (SpectraSNV[i] - MeanWaveLength[i]) * RegCoefficient[i];
            PreTSS += ConvMatrix[i];
        }
        PreTSS += MeanTSS;
        return PreTSS;
    }
}
